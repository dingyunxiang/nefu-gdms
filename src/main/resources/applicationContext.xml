<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd">

    <aop:config proxy-target-class="true"/>
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!--扫描包下所有使用注解的类型-->
    <context:component-scan base-package="cn.edu.nefu.gdms"/>
    <context:annotation-config/>


    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--2.数据库的连接池-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <!--配置连接池属性-->
        <property name="driverClass" value="${driver}"/>
        <property name="jdbcUrl" value="${url}"/>
        <property name="user" value="${username}"/>
        <property name="password" value="${password}"/>

        <!--c3p0连接池的私有属性-->
        <property name="maxPoolSize" value="100"/>
        <property name="minPoolSize" value="40"/>
        <!-- 线程池初始数量 -->
        <property name="initialPoolSize" value="20"></property>
        <!--close时不要coomit-->
        <property name="autoCommitOnClose" value="false"/>
        <!--超时时间-->
        <property name="checkoutTimeout" value="1800000"/>
        <!--当获取连接失败时的重试次数-->
        <property name="acquireIncrement" value="2"/>

    </bean>
    <!--约定大于配置-->
    <!--3.配置SQLSessionFactory对象-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据库连接池-->
        <property name="dataSource" ref="dataSource"/>
        <!--配置mybatis全局配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--扫描Entity包,使用别名 -->
        <property name="typeAliasesPackage" value="cn.edu.nefu.gdms.model"/>
        <!--扫描sql配置文件:mapper需要的xml文件-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <!--4.配置扫描Dao接口包,动态实现Dao接口,注入到Spring容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--注入sqlSessionFactory-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--给出需要扫描Dao接口包-->
        <property name="basePackage" value="cn.edu.nefu.gdms.dao"/>
    </bean>

    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--注入数据库的连接池-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--配置基于注解的声明是事务-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--2.Servlet-mapping映射路径:"/"-->
    <!--静态资源默认Servlet配置
        1.加入对静态资源的处理;js,gif,png
        2.允许使用"/"做整体映射
    -->
    <mvc:default-servlet-handler/>

    <!--3.配置jsp显示ViewResolver-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--4.spring sec配置-->

    <!--  Spring-Security 的配置 -->
    <!--
        注意use-expressions=true.表示开启表达式,否则表达式将不可用. see:http://www.family168.com/tutorial/springsec3/html/el-access.html
    -->

    <!-- security="none"  不过滤这些资源-->
    <sec:http pattern="/js/*" security="none"/>
    <sec:http pattern="/lonin.jsp" security="none"/>

    <sec:http auto-config="true" use-expressions="true">
        <!--允许所有人访问-->
        <!--允许ROLE_ADMIN权限访问-->
        <sec:intercept-url pattern="/user/findAll.html" access="hasAnyRole('ROLE_USER')"/>
        <!--允许ROLE_ADMIN权限访问-->
        <!--允许ROLE_USER权限访问-->
        <sec:intercept-url pattern="/success.jsp" access="hasAnyRole('ROLE_ADMIN','ROLE_USER')"/>
        <!--允许IS_AUTHENTICATED_ANONYMOUSLY匿名访问-->
        <sec:intercept-url pattern="/anonymously.jsp" access="IS_AUTHENTICATED_ANONYMOUSLY"/>



        <!-- login-page:默认指定的登录页面. authentication-failure-url:出错后跳转页面. default-target-url:成功登陆后跳转页面 -->
        <sec:form-login login-page="/index.jsp" authentication-failure-url="/user/login_failure.html"
                        default-target-url="/success.jsp"/>
        <!--
            invalidate-session：指定在退出系统时是否要销毁Session。logout-success-url：退出系统后转向的URL。logout-url：指定了用于响应退出系统请求的URL。其默认值为：/j_spring_sec_logout。
        -->
        <sec:logout invalidate-session="true" logout-success-url="/index.jsp"
                    logout-url="/j_spring_sec_logout"/>
        <!--
            max-sessions:允许用户帐号登录的次数。范例限制用户只能登录一次。exception-if-maximum-exceeded:
            默认为false，此值表示：用户第二次登录时，前一次的登录信息都被清空。当exception-if-maximum-exceeded="true"时系统会拒绝第二次登录。
        -->

        <sec:session-management>
            <sec:concurrency-control error-if-maximum-exceeded="true" max-sessions="1"/>
        </sec:session-management>

    </sec:http>

        <!-- 指定一个自定义的authentication-manager :customUserDetailsService -->

    <sec:authentication-manager>
        <sec:authentication-provider>
            <sec:jdbc-user-service data-source-ref="dataSource" />
        </sec:authentication-provider>
    </sec:authentication-manager>
    <!-- 对密码进行MD5编码 -->

    <!--
        通过 customUserDetailsService,Spring会控制用户的访问级别.
        也可以理解成:以后我们和数据库操作就是通过customUserDetailsService来进行关联.
     -->

</beans>

